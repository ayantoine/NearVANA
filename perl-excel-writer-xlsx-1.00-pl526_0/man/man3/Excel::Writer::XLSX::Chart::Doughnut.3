.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Excel::Writer::XLSX::Chart::Doughnut 3"
.TH Excel::Writer::XLSX::Chart::Doughnut 3 "2019-04-07" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Doughnut \- A class for writing Excel Doughnut charts.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To create a simple Excel file with a Doughnut chart using Excel::Writer::XLSX:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqchart.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&
\&    my $chart     = $workbook\->add_chart( type => \*(Aqdoughnut\*(Aq );
\&
\&    # Configure the chart.
\&    $chart\->add_series(
\&        categories => \*(Aq=Sheet1!$A$2:$A$7\*(Aq,
\&        values     => \*(Aq=Sheet1!$B$2:$B$7\*(Aq,
\&    );
\&
\&    # Add the worksheet data the chart refers to.
\&    my $data = [
\&        [ \*(AqCategory\*(Aq, 2, 3, 4, 5, 6, 7 ],
\&        [ \*(AqValue\*(Aq,    1, 4, 5, 2, 1, 5 ],
\&    ];
\&
\&    $worksheet\->write( \*(AqA1\*(Aq, $data );
\&
\&    _\|_END_\|_
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements Doughnut charts for Excel::Writer::XLSX. The chart object is created via the Workbook \f(CW\*(C`add_chart()\*(C'\fR method:
.PP
.Vb 1
\&    my $chart = $workbook\->add_chart( type => \*(Aqdoughnut\*(Aq );
.Ve
.PP
Once the object is created it can be configured via the following methods that are common to all chart classes:
.PP
.Vb 2
\&    $chart\->add_series();
\&    $chart\->set_title();
.Ve
.PP
These methods are explained in detail in Excel::Writer::XLSX::Chart. Class specific methods or settings, if any, are explained below.
.SH "Doughnut Chart Methods"
.IX Header "Doughnut Chart Methods"
.SS "\fIset_rotation()\fP"
.IX Subsection "set_rotation()"
The \f(CW\*(C`set_rotation()\*(C'\fR method is used to set the rotation of the first segment of a Pie/Doughnut chart. This has the effect of rotating the entire chart:
.PP
.Vb 1
\&    $chart\->set_rotation( 90 );
.Ve
.PP
The angle of rotation must be \f(CW\*(C`0 <= rotation <= 360\*(C'\fR.
.SS "\fIset_hole_size()\fP"
.IX Subsection "set_hole_size()"
The \f(CW\*(C`set_hole_size()\*(C'\fR method is used to set the hole size of a Doughnut chart:
.PP
.Vb 1
\&    $chart\->set_hole_size( 33 );
.Ve
.PP
The the hole size must be a percentage in the range  \f(CW\*(C`10 <= size <= 90\*(C'\fR.
.SS "User defined colors"
.IX Subsection "User defined colors"
It is possible to define chart colors for most types of Excel::Writer::XLSX charts via the \fIadd_series()\fR method. However, Pie/Doughnut charts are a special case since each segment is represented as a point so it is necessary to assign formatting to each point in the series:
.PP
.Vb 8
\&    $chart\->add_series(
\&        values => \*(Aq=Sheet1!$A$1:$A$3\*(Aq,
\&        points => [
\&            { fill => { color => \*(Aq#FF0000\*(Aq } },
\&            { fill => { color => \*(Aq#CC0000\*(Aq } },
\&            { fill => { color => \*(Aq#990000\*(Aq } },
\&        ],
\&    );
.Ve
.PP
See the main Excel::Writer::XLSX::Chart documentation for more details.
.PP
Doughnut charts support leader lines:
.PP
.Vb 11
\&    $chart\->add_series(
\&        name        => \*(AqDoughnut sales data\*(Aq,
\&        categories  => [ \*(AqSheet1\*(Aq, 1, 3, 0, 0 ],
\&        values      => [ \*(AqSheet1\*(Aq, 1, 3, 1, 1 ],
\&        data_labels => {
\&            series_name  => 1,
\&            percentage   => 1,
\&            leader_lines => 1,
\&            position     => \*(Aqoutside_end\*(Aq
\&        },
\&    );
.Ve
.PP
Note: Even when leader lines are turned on they aren't automatically visible in Excel or Excel::Writer::XLSX. Due to an Excel limitation (or design) leader lines only appear if the data label is moved manually or if the data labels are very close and need to be adjusted automatically.
.SS "Unsupported Methods"
.IX Subsection "Unsupported Methods"
A Doughnut chart doesn't have an X or Y axis so the following common chart methods are ignored.
.PP
.Vb 2
\&    $chart\->set_x_axis();
\&    $chart\->set_y_axis();
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a complete example that demonstrates most of the available features when creating a chart.
.PP
.Vb 1
\&    #!/usr/bin/perl
\&
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqchart_doughnut.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    my $bold      = $workbook\->add_format( bold => 1 );
\&
\&    # Add the worksheet data that the charts will refer to.
\&    my $headings = [ \*(AqCategory\*(Aq, \*(AqValues\*(Aq ];
\&    my $data = [
\&        [ \*(AqGlazed\*(Aq, \*(AqChocolate\*(Aq, \*(AqCream\*(Aq ],
\&        [ 50,       35,          15      ],
\&    ];
\&
\&    $worksheet\->write( \*(AqA1\*(Aq, $headings, $bold );
\&    $worksheet\->write( \*(AqA2\*(Aq, $data );
\&
\&    # Create a new chart object. In this case an embedded chart.
\&    my $chart = $workbook\->add_chart( type => \*(Aqdoughnut\*(Aq, embedded => 1 );
\&
\&    # Configure the series. Note the use of the array ref to define ranges:
\&    # [ $sheetname, $row_start, $row_end, $col_start, $col_end ].
\&    $chart\->add_series(
\&        name       => \*(AqDoughnut sales data\*(Aq,
\&        categories => [ \*(AqSheet1\*(Aq, 1, 3, 0, 0 ],
\&        values     => [ \*(AqSheet1\*(Aq, 1, 3, 1, 1 ],
\&    );
\&
\&    # Add a title.
\&    $chart\->set_title( name => \*(AqPopular Doughnut Types\*(Aq );
\&
\&    # Set an Excel chart style. Colors with white outline and shadow.
\&    $chart\->set_style( 10 );
\&
\&    # Insert the chart into the worksheet (with an offset).
\&    $worksheet\->insert_chart( \*(AqC2\*(Aq, $chart, 25, 10 );
\&
\&    _\|_END_\|_
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
John McNamara jmcnamara@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright MM-MMXIX, John McNamara.
.PP
All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.
